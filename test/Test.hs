{-# LANGUAGE ScopedTypeVariables, DataKinds #-}
module Main where

import Data.Char
import Data.Typeable
import Text.Regex.PCRE ((=~))
import Test.Tasty
import Test.Tasty.QuickCheck
import System.Environment (setEnv)
import Data.List
import GHC.TypeLits

import Data.String.Validate



main :: IO ()
main = do
  setEnv "TASTY_NUM_THREADS" "4"
  setEnv "TASTY_HIDE_SUCCESSES" "True"
  defaultMain $
    localOption (QuickCheckTests 50000) $
    testGroup "Phantom String Properties"
      [ testValidatorFor IsEmpty (== "")
      , testValidatorFor IsNotEmpty (/= "")

      , testCharacterClasses
      , testConjunctions
      , testDisjunctions

      , testGroup "Character Length"
        [ testLengthIs
        , testLengthAtLeast
        , testLengthAtMost
        ]

      , testGroup "Lines"
        [ testManyLinesOf
        , testLinesOf
        , testLinesOfN
        ]

      , testGroup "Substrings"
        [ testPrefix
        , testSuffix
        , testInfix
        , testIsExactly
        , testNotPrefix
        , testNotSuffix
        , testNotInfix
        , testIsNotExactly
        ]

      , testRegex

      , testGroup "Fixed Width"
        [ testManyFixedWidth
        , testFixedWidth
        , testFixedFormat

        , testFixedEquivalence
        ]

      , testEquivalences
      ]



testCharacterClasses :: TestTree
testCharacterClasses = testGroup "Character Classes"
  [ testValidatorFor Letters (all isLetter)
  , testValidatorFor Numbers (all isNumber)
  , testValidatorFor Punctuation (all isPunctuation)
  , testValidatorFor SymbolChars (all isSymbol)
  , testValidatorFor SeparatorChars (all isSeparator)
  , testValidatorFor PrintableChars (all isPrint)
  , testValidatorFor ControlChars (all isControl)
  , testValidatorFor MarkChars (all isMark)
  , testValidatorFor DecimalDigits (all isDigit)
  , testValidatorFor HexDigits (all isHexDigit)
  , testValidatorFor LowerCaseChars (all isLower)
  , testValidatorFor UpperCaseChars (all isUpper)
  , testValidatorFor AlphaNumericChars (all isAlphaNum)
  , testValidatorFor AsciiChars (all isAscii)
  , testValidatorFor Latin1Chars (all isLatin1)

  , testValidatorFor (EachCharIs (Letters :|| Numbers)) (all (some [isLetter, isNumber]))
  , testValidatorFor (EachCharIs (Letters :|| Punctuation)) (all (some [isLetter, isPunctuation]))
  , testValidatorFor (EachCharIs (Letters :|| SymbolChars)) (all (some [isLetter, isSymbol]))
  , testValidatorFor (EachCharIs (Letters :|| DecimalDigits)) (all (some [isLetter, isDigit]))
  ]



-- Generated by
-- @seq 128 | awk '{printf "  , testValidatorFor lengthIs%d (lengthEq %d)\n", $1, $1}'@
testLengthIs :: TestTree
testLengthIs = testGroup "Length Is"
  [ testValidatorFor lengthIs1 (lengthEq 1)
  , testValidatorFor lengthIs2 (lengthEq 2)
  , testValidatorFor lengthIs3 (lengthEq 3)
  , testValidatorFor lengthIs4 (lengthEq 4)
  , testValidatorFor lengthIs5 (lengthEq 5)
  , testValidatorFor lengthIs6 (lengthEq 6)
  , testValidatorFor lengthIs7 (lengthEq 7)
  , testValidatorFor lengthIs8 (lengthEq 8)
  , testValidatorFor lengthIs9 (lengthEq 9)
  , testValidatorFor lengthIs10 (lengthEq 10)
  , testValidatorFor lengthIs11 (lengthEq 11)
  , testValidatorFor lengthIs12 (lengthEq 12)
  , testValidatorFor lengthIs13 (lengthEq 13)
  , testValidatorFor lengthIs14 (lengthEq 14)
  , testValidatorFor lengthIs15 (lengthEq 15)
  , testValidatorFor lengthIs16 (lengthEq 16)
  , testValidatorFor lengthIs17 (lengthEq 17)
  , testValidatorFor lengthIs18 (lengthEq 18)
  , testValidatorFor lengthIs19 (lengthEq 19)
  , testValidatorFor lengthIs20 (lengthEq 20)
  , testValidatorFor lengthIs21 (lengthEq 21)
  , testValidatorFor lengthIs22 (lengthEq 22)
  , testValidatorFor lengthIs23 (lengthEq 23)
  , testValidatorFor lengthIs24 (lengthEq 24)
  , testValidatorFor lengthIs25 (lengthEq 25)
  , testValidatorFor lengthIs26 (lengthEq 26)
  , testValidatorFor lengthIs27 (lengthEq 27)
  , testValidatorFor lengthIs28 (lengthEq 28)
  , testValidatorFor lengthIs29 (lengthEq 29)
  , testValidatorFor lengthIs30 (lengthEq 30)
  , testValidatorFor lengthIs31 (lengthEq 31)
  , testValidatorFor lengthIs32 (lengthEq 32)
  , testValidatorFor lengthIs33 (lengthEq 33)
  , testValidatorFor lengthIs34 (lengthEq 34)
  , testValidatorFor lengthIs35 (lengthEq 35)
  , testValidatorFor lengthIs36 (lengthEq 36)
  , testValidatorFor lengthIs37 (lengthEq 37)
  , testValidatorFor lengthIs38 (lengthEq 38)
  , testValidatorFor lengthIs39 (lengthEq 39)
  , testValidatorFor lengthIs40 (lengthEq 40)
  , testValidatorFor lengthIs41 (lengthEq 41)
  , testValidatorFor lengthIs42 (lengthEq 42)
  , testValidatorFor lengthIs43 (lengthEq 43)
  , testValidatorFor lengthIs44 (lengthEq 44)
  , testValidatorFor lengthIs45 (lengthEq 45)
  , testValidatorFor lengthIs46 (lengthEq 46)
  , testValidatorFor lengthIs47 (lengthEq 47)
  , testValidatorFor lengthIs48 (lengthEq 48)
  , testValidatorFor lengthIs49 (lengthEq 49)
  , testValidatorFor lengthIs50 (lengthEq 50)
  , testValidatorFor lengthIs51 (lengthEq 51)
  , testValidatorFor lengthIs52 (lengthEq 52)
  , testValidatorFor lengthIs53 (lengthEq 53)
  , testValidatorFor lengthIs54 (lengthEq 54)
  , testValidatorFor lengthIs55 (lengthEq 55)
  , testValidatorFor lengthIs56 (lengthEq 56)
  , testValidatorFor lengthIs57 (lengthEq 57)
  , testValidatorFor lengthIs58 (lengthEq 58)
  , testValidatorFor lengthIs59 (lengthEq 59)
  , testValidatorFor lengthIs60 (lengthEq 60)
  , testValidatorFor lengthIs61 (lengthEq 61)
  , testValidatorFor lengthIs62 (lengthEq 62)
  , testValidatorFor lengthIs63 (lengthEq 63)
  , testValidatorFor lengthIs64 (lengthEq 64)
  , testValidatorFor lengthIs65 (lengthEq 65)
  , testValidatorFor lengthIs66 (lengthEq 66)
  , testValidatorFor lengthIs67 (lengthEq 67)
  , testValidatorFor lengthIs68 (lengthEq 68)
  , testValidatorFor lengthIs69 (lengthEq 69)
  , testValidatorFor lengthIs70 (lengthEq 70)
  , testValidatorFor lengthIs71 (lengthEq 71)
  , testValidatorFor lengthIs72 (lengthEq 72)
  , testValidatorFor lengthIs73 (lengthEq 73)
  , testValidatorFor lengthIs74 (lengthEq 74)
  , testValidatorFor lengthIs75 (lengthEq 75)
  , testValidatorFor lengthIs76 (lengthEq 76)
  , testValidatorFor lengthIs77 (lengthEq 77)
  , testValidatorFor lengthIs78 (lengthEq 78)
  , testValidatorFor lengthIs79 (lengthEq 79)
  , testValidatorFor lengthIs80 (lengthEq 80)
  , testValidatorFor lengthIs81 (lengthEq 81)
  , testValidatorFor lengthIs82 (lengthEq 82)
  , testValidatorFor lengthIs83 (lengthEq 83)
  , testValidatorFor lengthIs84 (lengthEq 84)
  , testValidatorFor lengthIs85 (lengthEq 85)
  , testValidatorFor lengthIs86 (lengthEq 86)
  , testValidatorFor lengthIs87 (lengthEq 87)
  , testValidatorFor lengthIs88 (lengthEq 88)
  , testValidatorFor lengthIs89 (lengthEq 89)
  , testValidatorFor lengthIs90 (lengthEq 90)
  , testValidatorFor lengthIs91 (lengthEq 91)
  , testValidatorFor lengthIs92 (lengthEq 92)
  , testValidatorFor lengthIs93 (lengthEq 93)
  , testValidatorFor lengthIs94 (lengthEq 94)
  , testValidatorFor lengthIs95 (lengthEq 95)
  , testValidatorFor lengthIs96 (lengthEq 96)
  , testValidatorFor lengthIs97 (lengthEq 97)
  , testValidatorFor lengthIs98 (lengthEq 98)
  , testValidatorFor lengthIs99 (lengthEq 99)
  , testValidatorFor lengthIs100 (lengthEq 100)
  , testValidatorFor lengthIs101 (lengthEq 101)
  , testValidatorFor lengthIs102 (lengthEq 102)
  , testValidatorFor lengthIs103 (lengthEq 103)
  , testValidatorFor lengthIs104 (lengthEq 104)
  , testValidatorFor lengthIs105 (lengthEq 105)
  , testValidatorFor lengthIs106 (lengthEq 106)
  , testValidatorFor lengthIs107 (lengthEq 107)
  , testValidatorFor lengthIs108 (lengthEq 108)
  , testValidatorFor lengthIs109 (lengthEq 109)
  , testValidatorFor lengthIs110 (lengthEq 110)
  , testValidatorFor lengthIs111 (lengthEq 111)
  , testValidatorFor lengthIs112 (lengthEq 112)
  , testValidatorFor lengthIs113 (lengthEq 113)
  , testValidatorFor lengthIs114 (lengthEq 114)
  , testValidatorFor lengthIs115 (lengthEq 115)
  , testValidatorFor lengthIs116 (lengthEq 116)
  , testValidatorFor lengthIs117 (lengthEq 117)
  , testValidatorFor lengthIs118 (lengthEq 118)
  , testValidatorFor lengthIs119 (lengthEq 119)
  , testValidatorFor lengthIs120 (lengthEq 120)
  , testValidatorFor lengthIs121 (lengthEq 121)
  , testValidatorFor lengthIs122 (lengthEq 122)
  , testValidatorFor lengthIs123 (lengthEq 123)
  , testValidatorFor lengthIs124 (lengthEq 124)
  , testValidatorFor lengthIs125 (lengthEq 125)
  , testValidatorFor lengthIs126 (lengthEq 126)
  , testValidatorFor lengthIs127 (lengthEq 127)
  , testValidatorFor lengthIs128 (lengthEq 128)
  ]



-- Generated by
-- @seq 128 | awk '{printf "  , testValidatorFor lengthAtLeast%d (lengthGEq %d)\n", $1, $1}'@
testLengthAtLeast :: TestTree
testLengthAtLeast = testGroup "Length At Least"
  [ testValidatorFor lengthAtLeast1 (lengthGEq 1)
  , testValidatorFor lengthAtLeast2 (lengthGEq 2)
  , testValidatorFor lengthAtLeast3 (lengthGEq 3)
  , testValidatorFor lengthAtLeast4 (lengthGEq 4)
  , testValidatorFor lengthAtLeast5 (lengthGEq 5)
  , testValidatorFor lengthAtLeast6 (lengthGEq 6)
  , testValidatorFor lengthAtLeast7 (lengthGEq 7)
  , testValidatorFor lengthAtLeast8 (lengthGEq 8)
  , testValidatorFor lengthAtLeast9 (lengthGEq 9)
  , testValidatorFor lengthAtLeast10 (lengthGEq 10)
  , testValidatorFor lengthAtLeast11 (lengthGEq 11)
  , testValidatorFor lengthAtLeast12 (lengthGEq 12)
  , testValidatorFor lengthAtLeast13 (lengthGEq 13)
  , testValidatorFor lengthAtLeast14 (lengthGEq 14)
  , testValidatorFor lengthAtLeast15 (lengthGEq 15)
  , testValidatorFor lengthAtLeast16 (lengthGEq 16)
  , testValidatorFor lengthAtLeast17 (lengthGEq 17)
  , testValidatorFor lengthAtLeast18 (lengthGEq 18)
  , testValidatorFor lengthAtLeast19 (lengthGEq 19)
  , testValidatorFor lengthAtLeast20 (lengthGEq 20)
  , testValidatorFor lengthAtLeast21 (lengthGEq 21)
  , testValidatorFor lengthAtLeast22 (lengthGEq 22)
  , testValidatorFor lengthAtLeast23 (lengthGEq 23)
  , testValidatorFor lengthAtLeast24 (lengthGEq 24)
  , testValidatorFor lengthAtLeast25 (lengthGEq 25)
  , testValidatorFor lengthAtLeast26 (lengthGEq 26)
  , testValidatorFor lengthAtLeast27 (lengthGEq 27)
  , testValidatorFor lengthAtLeast28 (lengthGEq 28)
  , testValidatorFor lengthAtLeast29 (lengthGEq 29)
  , testValidatorFor lengthAtLeast30 (lengthGEq 30)
  , testValidatorFor lengthAtLeast31 (lengthGEq 31)
  , testValidatorFor lengthAtLeast32 (lengthGEq 32)
  , testValidatorFor lengthAtLeast33 (lengthGEq 33)
  , testValidatorFor lengthAtLeast34 (lengthGEq 34)
  , testValidatorFor lengthAtLeast35 (lengthGEq 35)
  , testValidatorFor lengthAtLeast36 (lengthGEq 36)
  , testValidatorFor lengthAtLeast37 (lengthGEq 37)
  , testValidatorFor lengthAtLeast38 (lengthGEq 38)
  , testValidatorFor lengthAtLeast39 (lengthGEq 39)
  , testValidatorFor lengthAtLeast40 (lengthGEq 40)
  , testValidatorFor lengthAtLeast41 (lengthGEq 41)
  , testValidatorFor lengthAtLeast42 (lengthGEq 42)
  , testValidatorFor lengthAtLeast43 (lengthGEq 43)
  , testValidatorFor lengthAtLeast44 (lengthGEq 44)
  , testValidatorFor lengthAtLeast45 (lengthGEq 45)
  , testValidatorFor lengthAtLeast46 (lengthGEq 46)
  , testValidatorFor lengthAtLeast47 (lengthGEq 47)
  , testValidatorFor lengthAtLeast48 (lengthGEq 48)
  , testValidatorFor lengthAtLeast49 (lengthGEq 49)
  , testValidatorFor lengthAtLeast50 (lengthGEq 50)
  , testValidatorFor lengthAtLeast51 (lengthGEq 51)
  , testValidatorFor lengthAtLeast52 (lengthGEq 52)
  , testValidatorFor lengthAtLeast53 (lengthGEq 53)
  , testValidatorFor lengthAtLeast54 (lengthGEq 54)
  , testValidatorFor lengthAtLeast55 (lengthGEq 55)
  , testValidatorFor lengthAtLeast56 (lengthGEq 56)
  , testValidatorFor lengthAtLeast57 (lengthGEq 57)
  , testValidatorFor lengthAtLeast58 (lengthGEq 58)
  , testValidatorFor lengthAtLeast59 (lengthGEq 59)
  , testValidatorFor lengthAtLeast60 (lengthGEq 60)
  , testValidatorFor lengthAtLeast61 (lengthGEq 61)
  , testValidatorFor lengthAtLeast62 (lengthGEq 62)
  , testValidatorFor lengthAtLeast63 (lengthGEq 63)
  , testValidatorFor lengthAtLeast64 (lengthGEq 64)
  , testValidatorFor lengthAtLeast65 (lengthGEq 65)
  , testValidatorFor lengthAtLeast66 (lengthGEq 66)
  , testValidatorFor lengthAtLeast67 (lengthGEq 67)
  , testValidatorFor lengthAtLeast68 (lengthGEq 68)
  , testValidatorFor lengthAtLeast69 (lengthGEq 69)
  , testValidatorFor lengthAtLeast70 (lengthGEq 70)
  , testValidatorFor lengthAtLeast71 (lengthGEq 71)
  , testValidatorFor lengthAtLeast72 (lengthGEq 72)
  , testValidatorFor lengthAtLeast73 (lengthGEq 73)
  , testValidatorFor lengthAtLeast74 (lengthGEq 74)
  , testValidatorFor lengthAtLeast75 (lengthGEq 75)
  , testValidatorFor lengthAtLeast76 (lengthGEq 76)
  , testValidatorFor lengthAtLeast77 (lengthGEq 77)
  , testValidatorFor lengthAtLeast78 (lengthGEq 78)
  , testValidatorFor lengthAtLeast79 (lengthGEq 79)
  , testValidatorFor lengthAtLeast80 (lengthGEq 80)
  , testValidatorFor lengthAtLeast81 (lengthGEq 81)
  , testValidatorFor lengthAtLeast82 (lengthGEq 82)
  , testValidatorFor lengthAtLeast83 (lengthGEq 83)
  , testValidatorFor lengthAtLeast84 (lengthGEq 84)
  , testValidatorFor lengthAtLeast85 (lengthGEq 85)
  , testValidatorFor lengthAtLeast86 (lengthGEq 86)
  , testValidatorFor lengthAtLeast87 (lengthGEq 87)
  , testValidatorFor lengthAtLeast88 (lengthGEq 88)
  , testValidatorFor lengthAtLeast89 (lengthGEq 89)
  , testValidatorFor lengthAtLeast90 (lengthGEq 90)
  , testValidatorFor lengthAtLeast91 (lengthGEq 91)
  , testValidatorFor lengthAtLeast92 (lengthGEq 92)
  , testValidatorFor lengthAtLeast93 (lengthGEq 93)
  , testValidatorFor lengthAtLeast94 (lengthGEq 94)
  , testValidatorFor lengthAtLeast95 (lengthGEq 95)
  , testValidatorFor lengthAtLeast96 (lengthGEq 96)
  , testValidatorFor lengthAtLeast97 (lengthGEq 97)
  , testValidatorFor lengthAtLeast98 (lengthGEq 98)
  , testValidatorFor lengthAtLeast99 (lengthGEq 99)
  , testValidatorFor lengthAtLeast100 (lengthGEq 100)
  , testValidatorFor lengthAtLeast101 (lengthGEq 101)
  , testValidatorFor lengthAtLeast102 (lengthGEq 102)
  , testValidatorFor lengthAtLeast103 (lengthGEq 103)
  , testValidatorFor lengthAtLeast104 (lengthGEq 104)
  , testValidatorFor lengthAtLeast105 (lengthGEq 105)
  , testValidatorFor lengthAtLeast106 (lengthGEq 106)
  , testValidatorFor lengthAtLeast107 (lengthGEq 107)
  , testValidatorFor lengthAtLeast108 (lengthGEq 108)
  , testValidatorFor lengthAtLeast109 (lengthGEq 109)
  , testValidatorFor lengthAtLeast110 (lengthGEq 110)
  , testValidatorFor lengthAtLeast111 (lengthGEq 111)
  , testValidatorFor lengthAtLeast112 (lengthGEq 112)
  , testValidatorFor lengthAtLeast113 (lengthGEq 113)
  , testValidatorFor lengthAtLeast114 (lengthGEq 114)
  , testValidatorFor lengthAtLeast115 (lengthGEq 115)
  , testValidatorFor lengthAtLeast116 (lengthGEq 116)
  , testValidatorFor lengthAtLeast117 (lengthGEq 117)
  , testValidatorFor lengthAtLeast118 (lengthGEq 118)
  , testValidatorFor lengthAtLeast119 (lengthGEq 119)
  , testValidatorFor lengthAtLeast120 (lengthGEq 120)
  , testValidatorFor lengthAtLeast121 (lengthGEq 121)
  , testValidatorFor lengthAtLeast122 (lengthGEq 122)
  , testValidatorFor lengthAtLeast123 (lengthGEq 123)
  , testValidatorFor lengthAtLeast124 (lengthGEq 124)
  , testValidatorFor lengthAtLeast125 (lengthGEq 125)
  , testValidatorFor lengthAtLeast126 (lengthGEq 126)
  , testValidatorFor lengthAtLeast127 (lengthGEq 127)
  , testValidatorFor lengthAtLeast128 (lengthGEq 128)
  ]



-- Generated by
-- @seq 128 | awk '{printf "  , testValidatorFor lengthAtMost%d (lengthLEq %d)\n", $1, $1}'@
testLengthAtMost :: TestTree
testLengthAtMost = testGroup "Length At Most"
  [ testValidatorFor lengthAtMost1 (lengthLEq 1)
  , testValidatorFor lengthAtMost2 (lengthLEq 2)
  , testValidatorFor lengthAtMost3 (lengthLEq 3)
  , testValidatorFor lengthAtMost4 (lengthLEq 4)
  , testValidatorFor lengthAtMost5 (lengthLEq 5)
  , testValidatorFor lengthAtMost6 (lengthLEq 6)
  , testValidatorFor lengthAtMost7 (lengthLEq 7)
  , testValidatorFor lengthAtMost8 (lengthLEq 8)
  , testValidatorFor lengthAtMost9 (lengthLEq 9)
  , testValidatorFor lengthAtMost10 (lengthLEq 10)
  , testValidatorFor lengthAtMost11 (lengthLEq 11)
  , testValidatorFor lengthAtMost12 (lengthLEq 12)
  , testValidatorFor lengthAtMost13 (lengthLEq 13)
  , testValidatorFor lengthAtMost14 (lengthLEq 14)
  , testValidatorFor lengthAtMost15 (lengthLEq 15)
  , testValidatorFor lengthAtMost16 (lengthLEq 16)
  , testValidatorFor lengthAtMost17 (lengthLEq 17)
  , testValidatorFor lengthAtMost18 (lengthLEq 18)
  , testValidatorFor lengthAtMost19 (lengthLEq 19)
  , testValidatorFor lengthAtMost20 (lengthLEq 20)
  , testValidatorFor lengthAtMost21 (lengthLEq 21)
  , testValidatorFor lengthAtMost22 (lengthLEq 22)
  , testValidatorFor lengthAtMost23 (lengthLEq 23)
  , testValidatorFor lengthAtMost24 (lengthLEq 24)
  , testValidatorFor lengthAtMost25 (lengthLEq 25)
  , testValidatorFor lengthAtMost26 (lengthLEq 26)
  , testValidatorFor lengthAtMost27 (lengthLEq 27)
  , testValidatorFor lengthAtMost28 (lengthLEq 28)
  , testValidatorFor lengthAtMost29 (lengthLEq 29)
  , testValidatorFor lengthAtMost30 (lengthLEq 30)
  , testValidatorFor lengthAtMost31 (lengthLEq 31)
  , testValidatorFor lengthAtMost32 (lengthLEq 32)
  , testValidatorFor lengthAtMost33 (lengthLEq 33)
  , testValidatorFor lengthAtMost34 (lengthLEq 34)
  , testValidatorFor lengthAtMost35 (lengthLEq 35)
  , testValidatorFor lengthAtMost36 (lengthLEq 36)
  , testValidatorFor lengthAtMost37 (lengthLEq 37)
  , testValidatorFor lengthAtMost38 (lengthLEq 38)
  , testValidatorFor lengthAtMost39 (lengthLEq 39)
  , testValidatorFor lengthAtMost40 (lengthLEq 40)
  , testValidatorFor lengthAtMost41 (lengthLEq 41)
  , testValidatorFor lengthAtMost42 (lengthLEq 42)
  , testValidatorFor lengthAtMost43 (lengthLEq 43)
  , testValidatorFor lengthAtMost44 (lengthLEq 44)
  , testValidatorFor lengthAtMost45 (lengthLEq 45)
  , testValidatorFor lengthAtMost46 (lengthLEq 46)
  , testValidatorFor lengthAtMost47 (lengthLEq 47)
  , testValidatorFor lengthAtMost48 (lengthLEq 48)
  , testValidatorFor lengthAtMost49 (lengthLEq 49)
  , testValidatorFor lengthAtMost50 (lengthLEq 50)
  , testValidatorFor lengthAtMost51 (lengthLEq 51)
  , testValidatorFor lengthAtMost52 (lengthLEq 52)
  , testValidatorFor lengthAtMost53 (lengthLEq 53)
  , testValidatorFor lengthAtMost54 (lengthLEq 54)
  , testValidatorFor lengthAtMost55 (lengthLEq 55)
  , testValidatorFor lengthAtMost56 (lengthLEq 56)
  , testValidatorFor lengthAtMost57 (lengthLEq 57)
  , testValidatorFor lengthAtMost58 (lengthLEq 58)
  , testValidatorFor lengthAtMost59 (lengthLEq 59)
  , testValidatorFor lengthAtMost60 (lengthLEq 60)
  , testValidatorFor lengthAtMost61 (lengthLEq 61)
  , testValidatorFor lengthAtMost62 (lengthLEq 62)
  , testValidatorFor lengthAtMost63 (lengthLEq 63)
  , testValidatorFor lengthAtMost64 (lengthLEq 64)
  , testValidatorFor lengthAtMost65 (lengthLEq 65)
  , testValidatorFor lengthAtMost66 (lengthLEq 66)
  , testValidatorFor lengthAtMost67 (lengthLEq 67)
  , testValidatorFor lengthAtMost68 (lengthLEq 68)
  , testValidatorFor lengthAtMost69 (lengthLEq 69)
  , testValidatorFor lengthAtMost70 (lengthLEq 70)
  , testValidatorFor lengthAtMost71 (lengthLEq 71)
  , testValidatorFor lengthAtMost72 (lengthLEq 72)
  , testValidatorFor lengthAtMost73 (lengthLEq 73)
  , testValidatorFor lengthAtMost74 (lengthLEq 74)
  , testValidatorFor lengthAtMost75 (lengthLEq 75)
  , testValidatorFor lengthAtMost76 (lengthLEq 76)
  , testValidatorFor lengthAtMost77 (lengthLEq 77)
  , testValidatorFor lengthAtMost78 (lengthLEq 78)
  , testValidatorFor lengthAtMost79 (lengthLEq 79)
  , testValidatorFor lengthAtMost80 (lengthLEq 80)
  , testValidatorFor lengthAtMost81 (lengthLEq 81)
  , testValidatorFor lengthAtMost82 (lengthLEq 82)
  , testValidatorFor lengthAtMost83 (lengthLEq 83)
  , testValidatorFor lengthAtMost84 (lengthLEq 84)
  , testValidatorFor lengthAtMost85 (lengthLEq 85)
  , testValidatorFor lengthAtMost86 (lengthLEq 86)
  , testValidatorFor lengthAtMost87 (lengthLEq 87)
  , testValidatorFor lengthAtMost88 (lengthLEq 88)
  , testValidatorFor lengthAtMost89 (lengthLEq 89)
  , testValidatorFor lengthAtMost90 (lengthLEq 90)
  , testValidatorFor lengthAtMost91 (lengthLEq 91)
  , testValidatorFor lengthAtMost92 (lengthLEq 92)
  , testValidatorFor lengthAtMost93 (lengthLEq 93)
  , testValidatorFor lengthAtMost94 (lengthLEq 94)
  , testValidatorFor lengthAtMost95 (lengthLEq 95)
  , testValidatorFor lengthAtMost96 (lengthLEq 96)
  , testValidatorFor lengthAtMost97 (lengthLEq 97)
  , testValidatorFor lengthAtMost98 (lengthLEq 98)
  , testValidatorFor lengthAtMost99 (lengthLEq 99)
  , testValidatorFor lengthAtMost100 (lengthLEq 100)
  , testValidatorFor lengthAtMost101 (lengthLEq 101)
  , testValidatorFor lengthAtMost102 (lengthLEq 102)
  , testValidatorFor lengthAtMost103 (lengthLEq 103)
  , testValidatorFor lengthAtMost104 (lengthLEq 104)
  , testValidatorFor lengthAtMost105 (lengthLEq 105)
  , testValidatorFor lengthAtMost106 (lengthLEq 106)
  , testValidatorFor lengthAtMost107 (lengthLEq 107)
  , testValidatorFor lengthAtMost108 (lengthLEq 108)
  , testValidatorFor lengthAtMost109 (lengthLEq 109)
  , testValidatorFor lengthAtMost110 (lengthLEq 110)
  , testValidatorFor lengthAtMost111 (lengthLEq 111)
  , testValidatorFor lengthAtMost112 (lengthLEq 112)
  , testValidatorFor lengthAtMost113 (lengthLEq 113)
  , testValidatorFor lengthAtMost114 (lengthLEq 114)
  , testValidatorFor lengthAtMost115 (lengthLEq 115)
  , testValidatorFor lengthAtMost116 (lengthLEq 116)
  , testValidatorFor lengthAtMost117 (lengthLEq 117)
  , testValidatorFor lengthAtMost118 (lengthLEq 118)
  , testValidatorFor lengthAtMost119 (lengthLEq 119)
  , testValidatorFor lengthAtMost120 (lengthLEq 120)
  , testValidatorFor lengthAtMost121 (lengthLEq 121)
  , testValidatorFor lengthAtMost122 (lengthLEq 122)
  , testValidatorFor lengthAtMost123 (lengthLEq 123)
  , testValidatorFor lengthAtMost124 (lengthLEq 124)
  , testValidatorFor lengthAtMost125 (lengthLEq 125)
  , testValidatorFor lengthAtMost126 (lengthLEq 126)
  , testValidatorFor lengthAtMost127 (lengthLEq 127)
  , testValidatorFor lengthAtMost128 (lengthLEq 128)
  ]


testConjunctions2
  :: ( Eq p1, Show p1, Typeable p1, StringProperty p1
     , Eq p2, Show p2, Typeable p2, StringProperty p2
     , Eq p3, Show p3, Typeable p3, StringProperty p3
     , Eq p4, Show p4, Typeable p4, StringProperty p4
     , Eq p5, Show p5, Typeable p5, StringProperty p5
     , Eq p6, Show p6, Typeable p6, StringProperty p6
     , Eq p7, Show p7, Typeable p7, StringProperty p7
     )
  => (p1, String -> Bool)
  -> (p2, String -> Bool)
  -> (p3, String -> Bool)
  -> (p4, String -> Bool)
  -> (p5, String -> Bool)
  -> (p6, String -> Bool)
  -> (p7, String -> Bool)
  -> TestTree
testConjunctions2 (p1,q1) (p2,q2) (p3,q3) (p4,q4) (p5,q5) (p6,q6) (p7,q7) =
  testGroup "Property Conjunctions (2)"
    [ testValidatorFor (p1,p2) $ every [q1,q2]
    , testValidatorFor (p1,p3) $ every [q1,q3]
    , testValidatorFor (p1,p4) $ every [q1,q4]
    , testValidatorFor (p1,p5) $ every [q1,q5]
    , testValidatorFor (p1,p6) $ every [q1,q6]
    , testValidatorFor (p1,p7) $ every [q1,q7]
    , testValidatorFor (p2,p3) $ every [q2,q3]
    , testValidatorFor (p2,p4) $ every [q2,q4]
    , testValidatorFor (p2,p5) $ every [q2,q5]
    , testValidatorFor (p2,p6) $ every [q2,q6]
    , testValidatorFor (p2,p7) $ every [q2,q7]
    , testValidatorFor (p3,p4) $ every [q3,q4]
    , testValidatorFor (p3,p5) $ every [q3,q5]
    , testValidatorFor (p3,p6) $ every [q3,q6]
    , testValidatorFor (p3,p7) $ every [q3,q7]
    , testValidatorFor (p4,p5) $ every [q4,q5]
    , testValidatorFor (p4,p6) $ every [q4,q6]
    , testValidatorFor (p4,p7) $ every [q4,q7]
    , testValidatorFor (p5,p6) $ every [q5,q6]
    , testValidatorFor (p5,p7) $ every [q5,q7]
    , testValidatorFor (p6,p7) $ every [q6,q7]
    ]

testConjunctions3
  :: ( Eq p1, Show p1, Typeable p1, StringProperty p1
     , Eq p2, Show p2, Typeable p2, StringProperty p2
     , Eq p3, Show p3, Typeable p3, StringProperty p3
     , Eq p4, Show p4, Typeable p4, StringProperty p4
     , Eq p5, Show p5, Typeable p5, StringProperty p5
     , Eq p6, Show p6, Typeable p6, StringProperty p6
     , Eq p7, Show p7, Typeable p7, StringProperty p7
     )
  => (p1, String -> Bool)
  -> (p2, String -> Bool)
  -> (p3, String -> Bool)
  -> (p4, String -> Bool)
  -> (p5, String -> Bool)
  -> (p6, String -> Bool)
  -> (p7, String -> Bool)
  -> TestTree
testConjunctions3 (p1,q1) (p2,q2) (p3,q3) (p4,q4) (p5,q5) (p6,q6) (p7,q7) =
  testGroup "Property Conjunctions (3)"
    [ testValidatorFor (p1,p2,p3) $ every [q1,q2,q3]
    , testValidatorFor (p1,p2,p4) $ every [q1,q2,q4]
    , testValidatorFor (p1,p2,p5) $ every [q1,q2,q5]
    , testValidatorFor (p1,p2,p6) $ every [q1,q2,q6]
    , testValidatorFor (p1,p2,p7) $ every [q1,q2,q7]
    , testValidatorFor (p1,p3,p4) $ every [q1,q3,q4]
    , testValidatorFor (p1,p3,p5) $ every [q1,q3,q5]
    , testValidatorFor (p1,p3,p6) $ every [q1,q3,q6]
    , testValidatorFor (p1,p3,p7) $ every [q1,q3,q7]
    , testValidatorFor (p1,p4,p5) $ every [q1,q4,q5]
    , testValidatorFor (p1,p4,p6) $ every [q1,q4,q6]
    , testValidatorFor (p1,p4,p7) $ every [q1,q4,q7]
    , testValidatorFor (p1,p5,p6) $ every [q1,q5,q6]
    , testValidatorFor (p1,p5,p7) $ every [q1,q5,q7]
    , testValidatorFor (p1,p6,p7) $ every [q1,q6,q7]
    , testValidatorFor (p2,p3,p4) $ every [q2,q3,q4]
    , testValidatorFor (p2,p3,p5) $ every [q2,q3,q5]
    , testValidatorFor (p2,p3,p6) $ every [q2,q3,q6]
    , testValidatorFor (p2,p3,p7) $ every [q2,q3,q7]
    , testValidatorFor (p2,p4,p5) $ every [q2,q4,q5]
    , testValidatorFor (p2,p4,p6) $ every [q2,q4,q6]
    , testValidatorFor (p2,p4,p7) $ every [q2,q4,q7]
    , testValidatorFor (p2,p5,p6) $ every [q2,q5,q6]
    , testValidatorFor (p2,p5,p7) $ every [q2,q5,q7]
    , testValidatorFor (p2,p6,p7) $ every [q2,q6,q7]
    , testValidatorFor (p3,p4,p5) $ every [q3,q4,q5]
    , testValidatorFor (p3,p4,p6) $ every [q3,q4,q6]
    , testValidatorFor (p3,p4,p7) $ every [q3,q4,q7]
    , testValidatorFor (p3,p5,p6) $ every [q3,q5,q6]
    , testValidatorFor (p3,p5,p7) $ every [q3,q5,q7]
    , testValidatorFor (p3,p6,p7) $ every [q3,q6,q7]
    , testValidatorFor (p4,p5,p6) $ every [q4,q5,q6]
    , testValidatorFor (p4,p5,p7) $ every [q4,q5,q7]
    , testValidatorFor (p4,p6,p7) $ every [q4,q6,q7]
    , testValidatorFor (p5,p6,p7) $ every [q5,q6,q7]
    ]

testConjunctions4
  :: ( Eq p1, Show p1, Typeable p1, StringProperty p1
     , Eq p2, Show p2, Typeable p2, StringProperty p2
     , Eq p3, Show p3, Typeable p3, StringProperty p3
     , Eq p4, Show p4, Typeable p4, StringProperty p4
     , Eq p5, Show p5, Typeable p5, StringProperty p5
     , Eq p6, Show p6, Typeable p6, StringProperty p6
     , Eq p7, Show p7, Typeable p7, StringProperty p7
     )
  => (p1, String -> Bool)
  -> (p2, String -> Bool)
  -> (p3, String -> Bool)
  -> (p4, String -> Bool)
  -> (p5, String -> Bool)
  -> (p6, String -> Bool)
  -> (p7, String -> Bool)
  -> TestTree
testConjunctions4 (p1,q1) (p2,q2) (p3,q3) (p4,q4) (p5,q5) (p6,q6) (p7,q7) =
  testGroup "Property Conjunctions (4)"
    [ testValidatorFor (p1,p2,p3,p4) $ every [q1,q2,q3,q4]
    , testValidatorFor (p1,p2,p3,p5) $ every [q1,q2,q3,q5]
    , testValidatorFor (p1,p2,p3,p6) $ every [q1,q2,q3,q6]
    , testValidatorFor (p1,p2,p3,p7) $ every [q1,q2,q3,q7]
    , testValidatorFor (p1,p2,p4,p5) $ every [q1,q2,q4,q5]
    , testValidatorFor (p1,p2,p4,p6) $ every [q1,q2,q4,q6]
    , testValidatorFor (p1,p2,p4,p7) $ every [q1,q2,q4,q7]
    , testValidatorFor (p1,p2,p5,p6) $ every [q1,q2,q5,q6]
    , testValidatorFor (p1,p2,p5,p7) $ every [q1,q2,q5,q7]
    , testValidatorFor (p1,p2,p6,p7) $ every [q1,q2,q6,q7]
    , testValidatorFor (p1,p3,p4,p5) $ every [q1,q3,q4,q5]
    , testValidatorFor (p1,p3,p4,p6) $ every [q1,q3,q4,q6]
    , testValidatorFor (p1,p3,p4,p7) $ every [q1,q3,q4,q7]
    , testValidatorFor (p1,p3,p5,p6) $ every [q1,q3,q5,q6]
    , testValidatorFor (p1,p3,p5,p7) $ every [q1,q3,q5,q7]
    , testValidatorFor (p1,p3,p6,p7) $ every [q1,q3,q6,q7]
    , testValidatorFor (p1,p4,p5,p6) $ every [q1,q4,q5,q6]
    , testValidatorFor (p1,p4,p5,p7) $ every [q1,q4,q5,q7]
    , testValidatorFor (p1,p4,p6,p7) $ every [q1,q4,q6,q7]
    , testValidatorFor (p1,p5,p6,p7) $ every [q1,q5,q6,q7]
    , testValidatorFor (p2,p3,p4,p5) $ every [q2,q3,q4,q5]
    , testValidatorFor (p2,p3,p4,p6) $ every [q2,q3,q4,q6]
    , testValidatorFor (p2,p3,p4,p7) $ every [q2,q3,q4,q7]
    , testValidatorFor (p2,p3,p5,p6) $ every [q2,q3,q5,q6]
    , testValidatorFor (p2,p3,p5,p7) $ every [q2,q3,q5,q7]
    , testValidatorFor (p2,p3,p6,p7) $ every [q2,q3,q6,q7]
    , testValidatorFor (p2,p4,p5,p6) $ every [q2,q4,q5,q6]
    , testValidatorFor (p2,p4,p5,p7) $ every [q2,q4,q5,q7]
    , testValidatorFor (p2,p4,p6,p7) $ every [q2,q4,q6,q7]
    , testValidatorFor (p2,p5,p6,p7) $ every [q2,q5,q6,q7]
    , testValidatorFor (p3,p4,p5,p6) $ every [q3,q4,q5,q6]
    , testValidatorFor (p3,p4,p5,p7) $ every [q3,q4,q5,q7]
    , testValidatorFor (p3,p4,p6,p7) $ every [q3,q4,q6,q7]
    , testValidatorFor (p3,p5,p6,p7) $ every [q3,q5,q6,q7]
    , testValidatorFor (p4,p5,p6,p7) $ every [q4,q5,q6,q7]
    ]

testConjunctions5
  :: ( Eq p1, Show p1, Typeable p1, StringProperty p1
     , Eq p2, Show p2, Typeable p2, StringProperty p2
     , Eq p3, Show p3, Typeable p3, StringProperty p3
     , Eq p4, Show p4, Typeable p4, StringProperty p4
     , Eq p5, Show p5, Typeable p5, StringProperty p5
     , Eq p6, Show p6, Typeable p6, StringProperty p6
     , Eq p7, Show p7, Typeable p7, StringProperty p7
     )
  => (p1, String -> Bool)
  -> (p2, String -> Bool)
  -> (p3, String -> Bool)
  -> (p4, String -> Bool)
  -> (p5, String -> Bool)
  -> (p6, String -> Bool)
  -> (p7, String -> Bool)
  -> TestTree
testConjunctions5 (p1,q1) (p2,q2) (p3,q3) (p4,q4) (p5,q5) (p6,q6) (p7,q7) =
  testGroup "Property Conjunctions (5)"
    [ testValidatorFor (p1,p2,p3,p4,p5) $ every [q1,q2,q3,q4,q5]
    , testValidatorFor (p1,p2,p3,p4,p6) $ every [q1,q2,q3,q4,q6]
    , testValidatorFor (p1,p2,p3,p4,p7) $ every [q1,q2,q3,q4,q7]
    , testValidatorFor (p1,p2,p3,p5,p6) $ every [q1,q2,q3,q5,q6]
    , testValidatorFor (p1,p2,p3,p5,p7) $ every [q1,q2,q3,q5,q7]
    , testValidatorFor (p1,p2,p3,p6,p7) $ every [q1,q2,q3,q6,q7]
    , testValidatorFor (p1,p2,p4,p5,p6) $ every [q1,q2,q4,q5,q6]
    , testValidatorFor (p1,p2,p4,p5,p7) $ every [q1,q2,q4,q5,q7]
    , testValidatorFor (p1,p2,p4,p6,p7) $ every [q1,q2,q4,q6,q7]
    , testValidatorFor (p1,p2,p5,p6,p7) $ every [q1,q2,q5,q6,q7]
    , testValidatorFor (p1,p3,p4,p5,p6) $ every [q1,q3,q4,q5,q6]
    , testValidatorFor (p1,p3,p4,p5,p7) $ every [q1,q3,q4,q5,q7]
    , testValidatorFor (p1,p3,p4,p6,p7) $ every [q1,q3,q4,q6,q7]
    , testValidatorFor (p1,p3,p5,p6,p7) $ every [q1,q3,q5,q6,q7]
    , testValidatorFor (p1,p4,p5,p6,p7) $ every [q1,q4,q5,q6,q7]
    , testValidatorFor (p2,p3,p4,p5,p6) $ every [q2,q3,q4,q5,q6]
    , testValidatorFor (p2,p3,p4,p5,p7) $ every [q2,q3,q4,q5,q7]
    , testValidatorFor (p2,p3,p4,p6,p7) $ every [q2,q3,q4,q6,q7]
    , testValidatorFor (p2,p3,p5,p6,p7) $ every [q2,q3,q5,q6,q7]
    , testValidatorFor (p2,p4,p5,p6,p7) $ every [q2,q4,q5,q6,q7]
    , testValidatorFor (p3,p4,p5,p6,p7) $ every [q3,q4,q5,q6,q7]
    ]

testConjunctions6
  :: ( Eq p1, Show p1, Typeable p1, StringProperty p1
     , Eq p2, Show p2, Typeable p2, StringProperty p2
     , Eq p3, Show p3, Typeable p3, StringProperty p3
     , Eq p4, Show p4, Typeable p4, StringProperty p4
     , Eq p5, Show p5, Typeable p5, StringProperty p5
     , Eq p6, Show p6, Typeable p6, StringProperty p6
     , Eq p7, Show p7, Typeable p7, StringProperty p7
     , Eq p8, Show p8, Typeable p8, StringProperty p8
     )
  => (p1, String -> Bool)
  -> (p2, String -> Bool)
  -> (p3, String -> Bool)
  -> (p4, String -> Bool)
  -> (p5, String -> Bool)
  -> (p6, String -> Bool)
  -> (p7, String -> Bool)
  -> (p8, String -> Bool)
  -> TestTree
testConjunctions6 (p1,q1) (p2,q2) (p3,q3) (p4,q4) (p5,q5) (p6,q6) (p7,q7) (p8,q8) =
  testGroup "Property Conjunctions (6)"
    [ testValidatorFor (p1,p2,p3,p4,p5,p6) $ every [q1,q2,q3,q4,q5,q6]
    , testValidatorFor (p1,p2,p3,p4,p5,p7) $ every [q1,q2,q3,q4,q5,q7]
    , testValidatorFor (p1,p2,p3,p4,p5,p8) $ every [q1,q2,q3,q4,q5,q8]
    , testValidatorFor (p1,p2,p3,p4,p6,p7) $ every [q1,q2,q3,q4,q6,q7]
    , testValidatorFor (p1,p2,p3,p4,p6,p8) $ every [q1,q2,q3,q4,q6,q8]
    , testValidatorFor (p1,p2,p3,p4,p7,p8) $ every [q1,q2,q3,q4,q7,q8]
    , testValidatorFor (p1,p2,p3,p5,p6,p7) $ every [q1,q2,q3,q5,q6,q7]
    , testValidatorFor (p1,p2,p3,p5,p6,p8) $ every [q1,q2,q3,q5,q6,q8]
    , testValidatorFor (p1,p2,p3,p5,p7,p8) $ every [q1,q2,q3,q5,q7,q8]
    , testValidatorFor (p1,p2,p3,p6,p7,p8) $ every [q1,q2,q3,q6,q7,q8]
    , testValidatorFor (p1,p2,p4,p5,p6,p7) $ every [q1,q2,q4,q5,q6,q7]
    , testValidatorFor (p1,p2,p4,p5,p6,p8) $ every [q1,q2,q4,q5,q6,q8]
    , testValidatorFor (p1,p2,p4,p5,p7,p8) $ every [q1,q2,q4,q5,q7,q8]
    , testValidatorFor (p1,p2,p4,p6,p7,p8) $ every [q1,q2,q4,q6,q7,q8]
    , testValidatorFor (p1,p2,p5,p6,p7,p8) $ every [q1,q2,q5,q6,q7,q8]
    , testValidatorFor (p1,p3,p4,p5,p6,p7) $ every [q1,q3,q4,q5,q6,q7]
    , testValidatorFor (p1,p3,p4,p5,p6,p8) $ every [q1,q3,q4,q5,q6,q8]
    , testValidatorFor (p1,p3,p4,p5,p7,p8) $ every [q1,q3,q4,q5,q7,q8]
    , testValidatorFor (p1,p3,p4,p6,p7,p8) $ every [q1,q3,q4,q6,q7,q8]
    , testValidatorFor (p1,p3,p5,p6,p7,p8) $ every [q1,q3,q5,q6,q7,q8]
    , testValidatorFor (p1,p4,p5,p6,p7,p8) $ every [q1,q4,q5,q6,q7,q8]
    , testValidatorFor (p2,p3,p4,p5,p6,p7) $ every [q2,q3,q4,q5,q6,q7]
    , testValidatorFor (p2,p3,p4,p5,p6,p8) $ every [q2,q3,q4,q5,q6,q8]
    , testValidatorFor (p2,p3,p4,p5,p7,p8) $ every [q2,q3,q4,q5,q7,q8]
    , testValidatorFor (p2,p3,p4,p6,p7,p8) $ every [q2,q3,q4,q6,q7,q8]
    , testValidatorFor (p2,p3,p5,p6,p7,p8) $ every [q2,q3,q5,q6,q7,q8]
    , testValidatorFor (p2,p4,p5,p6,p7,p8) $ every [q2,q4,q5,q6,q7,q8]
    , testValidatorFor (p3,p4,p5,p6,p7,p8) $ every [q3,q4,q5,q6,q7,q8]
    ]

testConjunctions7
  :: ( Eq p1, Show p1, Typeable p1, StringProperty p1
     , Eq p2, Show p2, Typeable p2, StringProperty p2
     , Eq p3, Show p3, Typeable p3, StringProperty p3
     , Eq p4, Show p4, Typeable p4, StringProperty p4
     , Eq p5, Show p5, Typeable p5, StringProperty p5
     , Eq p6, Show p6, Typeable p6, StringProperty p6
     , Eq p7, Show p7, Typeable p7, StringProperty p7
     , Eq p8, Show p8, Typeable p8, StringProperty p8
     , Eq p9, Show p9, Typeable p9, StringProperty p9
     )
  => (p1, String -> Bool)
  -> (p2, String -> Bool)
  -> (p3, String -> Bool)
  -> (p4, String -> Bool)
  -> (p5, String -> Bool)
  -> (p6, String -> Bool)
  -> (p7, String -> Bool)
  -> (p8, String -> Bool)
  -> (p9, String -> Bool)
  -> TestTree
testConjunctions7 (p1,q1) (p2,q2) (p3,q3) (p4,q4) (p5,q5) (p6,q6) (p7,q7) (p8,q8) (p9,q9) =
  testGroup "Property Conjunctions (7)"
    [ testValidatorFor (p1,p2,p3,p4,p5,p6,p7) $ every [q1,q2,q3,q4,q5,q6,q7]
    , testValidatorFor (p1,p2,p3,p4,p5,p6,p8) $ every [q1,q2,q3,q4,q5,q6,q8]
    , testValidatorFor (p1,p2,p3,p4,p5,p6,p9) $ every [q1,q2,q3,q4,q5,q6,q9]
    , testValidatorFor (p1,p2,p3,p4,p5,p7,p8) $ every [q1,q2,q3,q4,q5,q7,q8]
    , testValidatorFor (p1,p2,p3,p4,p5,p7,p9) $ every [q1,q2,q3,q4,q5,q7,q9]
    , testValidatorFor (p1,p2,p3,p4,p5,p8,p9) $ every [q1,q2,q3,q4,q5,q8,q9]
    , testValidatorFor (p1,p2,p3,p4,p6,p7,p8) $ every [q1,q2,q3,q4,q6,q7,q8]
    , testValidatorFor (p1,p2,p3,p4,p6,p7,p9) $ every [q1,q2,q3,q4,q6,q7,q9]
    , testValidatorFor (p1,p2,p3,p4,p6,p8,p9) $ every [q1,q2,q3,q4,q6,q8,q9]
    , testValidatorFor (p1,p2,p3,p4,p7,p8,p9) $ every [q1,q2,q3,q4,q7,q8,q9]
    , testValidatorFor (p1,p2,p3,p5,p6,p7,p8) $ every [q1,q2,q3,q5,q6,q7,q8]
    , testValidatorFor (p1,p2,p3,p5,p6,p7,p9) $ every [q1,q2,q3,q5,q6,q7,q9]
    , testValidatorFor (p1,p2,p3,p5,p6,p8,p9) $ every [q1,q2,q3,q5,q6,q8,q9]
    , testValidatorFor (p1,p2,p3,p5,p7,p8,p9) $ every [q1,q2,q3,q5,q7,q8,q9]
    , testValidatorFor (p1,p2,p3,p6,p7,p8,p9) $ every [q1,q2,q3,q6,q7,q8,q9]
    , testValidatorFor (p1,p2,p4,p5,p6,p7,p8) $ every [q1,q2,q4,q5,q6,q7,q8]
    , testValidatorFor (p1,p2,p4,p5,p6,p7,p9) $ every [q1,q2,q4,q5,q6,q7,q9]
    , testValidatorFor (p1,p2,p4,p5,p6,p8,p9) $ every [q1,q2,q4,q5,q6,q8,q9]
    , testValidatorFor (p1,p2,p4,p5,p7,p8,p9) $ every [q1,q2,q4,q5,q7,q8,q9]
    , testValidatorFor (p1,p2,p4,p6,p7,p8,p9) $ every [q1,q2,q4,q6,q7,q8,q9]
    , testValidatorFor (p1,p2,p5,p6,p7,p8,p9) $ every [q1,q2,q5,q6,q7,q8,q9]
    , testValidatorFor (p1,p3,p4,p5,p6,p7,p8) $ every [q1,q3,q4,q5,q6,q7,q8]
    , testValidatorFor (p1,p3,p4,p5,p6,p7,p9) $ every [q1,q3,q4,q5,q6,q7,q9]
    , testValidatorFor (p1,p3,p4,p5,p6,p8,p9) $ every [q1,q3,q4,q5,q6,q8,q9]
    , testValidatorFor (p1,p3,p4,p5,p7,p8,p9) $ every [q1,q3,q4,q5,q7,q8,q9]
    , testValidatorFor (p1,p3,p4,p6,p7,p8,p9) $ every [q1,q3,q4,q6,q7,q8,q9]
    , testValidatorFor (p1,p3,p5,p6,p7,p8,p9) $ every [q1,q3,q5,q6,q7,q8,q9]
    , testValidatorFor (p1,p4,p5,p6,p7,p8,p9) $ every [q1,q4,q5,q6,q7,q8,q9]
    , testValidatorFor (p2,p3,p4,p5,p6,p7,p8) $ every [q2,q3,q4,q5,q6,q7,q8]
    , testValidatorFor (p2,p3,p4,p5,p6,p7,p9) $ every [q2,q3,q4,q5,q6,q7,q9]
    , testValidatorFor (p2,p3,p4,p5,p6,p8,p9) $ every [q2,q3,q4,q5,q6,q8,q9]
    , testValidatorFor (p2,p3,p4,p5,p7,p8,p9) $ every [q2,q3,q4,q5,q7,q8,q9]
    , testValidatorFor (p2,p3,p4,p6,p7,p8,p9) $ every [q2,q3,q4,q6,q7,q8,q9]
    , testValidatorFor (p2,p3,p5,p6,p7,p8,p9) $ every [q2,q3,q5,q6,q7,q8,q9]
    , testValidatorFor (p2,p4,p5,p6,p7,p8,p9) $ every [q2,q4,q5,q6,q7,q8,q9]
    , testValidatorFor (p3,p4,p5,p6,p7,p8,p9) $ every [q3,q4,q5,q6,q7,q8,q9]
    ]

testConjunctions8
  :: ( Eq p1, Show p1, Typeable p1, StringProperty p1
     , Eq p2, Show p2, Typeable p2, StringProperty p2
     , Eq p3, Show p3, Typeable p3, StringProperty p3
     , Eq p4, Show p4, Typeable p4, StringProperty p4
     , Eq p5, Show p5, Typeable p5, StringProperty p5
     , Eq p6, Show p6, Typeable p6, StringProperty p6
     , Eq p7, Show p7, Typeable p7, StringProperty p7
     , Eq p8, Show p8, Typeable p8, StringProperty p8
     , Eq p9, Show p9, Typeable p9, StringProperty p9
     , Eq pA, Show pA, Typeable pA, StringProperty pA
     )
  => (p1, String -> Bool)
  -> (p2, String -> Bool)
  -> (p3, String -> Bool)
  -> (p4, String -> Bool)
  -> (p5, String -> Bool)
  -> (p6, String -> Bool)
  -> (p7, String -> Bool)
  -> (p8, String -> Bool)
  -> (p9, String -> Bool)
  -> (pA, String -> Bool)
  -> TestTree
testConjunctions8 (p1,q1) (p2,q2) (p3,q3) (p4,q4) (p5,q5) (p6,q6) (p7,q7) (p8,q8) (p9,q9) (pA,qA) =
  testGroup "Property Conjunctions (8)"
    [ testValidatorFor (p1,p2,p3,p4,p5,p6,p7,p8) $ every [q1,q2,q3,q4,q5,q6,q7,q8]
    , testValidatorFor (p1,p2,p3,p4,p5,p6,p7,p9) $ every [q1,q2,q3,q4,q5,q6,q7,q9]
    , testValidatorFor (p1,p2,p3,p4,p5,p6,p7,pA) $ every [q1,q2,q3,q4,q5,q6,q7,qA]
    , testValidatorFor (p1,p2,p3,p4,p5,p6,p8,p9) $ every [q1,q2,q3,q4,q5,q6,q8,q9]
    , testValidatorFor (p1,p2,p3,p4,p5,p6,p8,pA) $ every [q1,q2,q3,q4,q5,q6,q8,qA]
    , testValidatorFor (p1,p2,p3,p4,p5,p6,p9,pA) $ every [q1,q2,q3,q4,q5,q6,q9,qA]
    , testValidatorFor (p1,p2,p3,p4,p5,p7,p8,p9) $ every [q1,q2,q3,q4,q5,q7,q8,q9]
    , testValidatorFor (p1,p2,p3,p4,p5,p7,p8,pA) $ every [q1,q2,q3,q4,q5,q7,q8,qA]
    , testValidatorFor (p1,p2,p3,p4,p5,p7,p9,pA) $ every [q1,q2,q3,q4,q5,q7,q9,qA]
    , testValidatorFor (p1,p2,p3,p4,p5,p8,p9,pA) $ every [q1,q2,q3,q4,q5,q8,q9,qA]
    , testValidatorFor (p1,p2,p3,p4,p6,p7,p8,p9) $ every [q1,q2,q3,q4,q6,q7,q8,q9]
    , testValidatorFor (p1,p2,p3,p4,p6,p7,p8,pA) $ every [q1,q2,q3,q4,q6,q7,q8,qA]
    , testValidatorFor (p1,p2,p3,p4,p6,p7,p9,pA) $ every [q1,q2,q3,q4,q6,q7,q9,qA]
    , testValidatorFor (p1,p2,p3,p4,p6,p8,p9,pA) $ every [q1,q2,q3,q4,q6,q8,q9,qA]
    , testValidatorFor (p1,p2,p3,p4,p7,p8,p9,pA) $ every [q1,q2,q3,q4,q7,q8,q9,qA]
    , testValidatorFor (p1,p2,p3,p5,p6,p7,p8,p9) $ every [q1,q2,q3,q5,q6,q7,q8,q9]
    , testValidatorFor (p1,p2,p3,p5,p6,p7,p8,pA) $ every [q1,q2,q3,q5,q6,q7,q8,qA]
    , testValidatorFor (p1,p2,p3,p5,p6,p7,p9,pA) $ every [q1,q2,q3,q5,q6,q7,q9,qA]
    , testValidatorFor (p1,p2,p3,p5,p6,p8,p9,pA) $ every [q1,q2,q3,q5,q6,q8,q9,qA]
    , testValidatorFor (p1,p2,p3,p5,p7,p8,p9,pA) $ every [q1,q2,q3,q5,q7,q8,q9,qA]
    , testValidatorFor (p1,p2,p3,p6,p7,p8,p9,pA) $ every [q1,q2,q3,q6,q7,q8,q9,qA]
    , testValidatorFor (p1,p2,p4,p5,p6,p7,p8,p9) $ every [q1,q2,q4,q5,q6,q7,q8,q9]
    , testValidatorFor (p1,p2,p4,p5,p6,p7,p8,pA) $ every [q1,q2,q4,q5,q6,q7,q8,qA]
    , testValidatorFor (p1,p2,p4,p5,p6,p7,p9,pA) $ every [q1,q2,q4,q5,q6,q7,q9,qA]
    , testValidatorFor (p1,p2,p4,p5,p6,p8,p9,pA) $ every [q1,q2,q4,q5,q6,q8,q9,qA]
    , testValidatorFor (p1,p2,p4,p5,p7,p8,p9,pA) $ every [q1,q2,q4,q5,q7,q8,q9,qA]
    , testValidatorFor (p1,p2,p4,p6,p7,p8,p9,pA) $ every [q1,q2,q4,q6,q7,q8,q9,qA]
    , testValidatorFor (p1,p2,p5,p6,p7,p8,p9,pA) $ every [q1,q2,q5,q6,q7,q8,q9,qA]
    , testValidatorFor (p1,p3,p4,p5,p6,p7,p8,p9) $ every [q1,q3,q4,q5,q6,q7,q8,q9]
    , testValidatorFor (p1,p3,p4,p5,p6,p7,p8,pA) $ every [q1,q3,q4,q5,q6,q7,q8,qA]
    , testValidatorFor (p1,p3,p4,p5,p6,p7,p9,pA) $ every [q1,q3,q4,q5,q6,q7,q9,qA]
    , testValidatorFor (p1,p3,p4,p5,p6,p8,p9,pA) $ every [q1,q3,q4,q5,q6,q8,q9,qA]
    , testValidatorFor (p1,p3,p4,p5,p7,p8,p9,pA) $ every [q1,q3,q4,q5,q7,q8,q9,qA]
    , testValidatorFor (p1,p3,p4,p6,p7,p8,p9,pA) $ every [q1,q3,q4,q6,q7,q8,q9,qA]
    , testValidatorFor (p1,p3,p5,p6,p7,p8,p9,pA) $ every [q1,q3,q5,q6,q7,q8,q9,qA]
    , testValidatorFor (p1,p4,p5,p6,p7,p8,p9,pA) $ every [q1,q4,q5,q6,q7,q8,q9,qA]
    , testValidatorFor (p2,p3,p4,p5,p6,p7,p8,p9) $ every [q2,q3,q4,q5,q6,q7,q8,q9]
    , testValidatorFor (p2,p3,p4,p5,p6,p7,p8,pA) $ every [q2,q3,q4,q5,q6,q7,q8,qA]
    , testValidatorFor (p2,p3,p4,p5,p6,p7,p9,pA) $ every [q2,q3,q4,q5,q6,q7,q9,qA]
    , testValidatorFor (p2,p3,p4,p5,p6,p8,p9,pA) $ every [q2,q3,q4,q5,q6,q8,q9,qA]
    , testValidatorFor (p2,p3,p4,p5,p7,p8,p9,pA) $ every [q2,q3,q4,q5,q7,q8,q9,qA]
    , testValidatorFor (p2,p3,p4,p6,p7,p8,p9,pA) $ every [q2,q3,q4,q6,q7,q8,q9,qA]
    , testValidatorFor (p2,p3,p5,p6,p7,p8,p9,pA) $ every [q2,q3,q5,q6,q7,q8,q9,qA]
    , testValidatorFor (p2,p4,p5,p6,p7,p8,p9,pA) $ every [q2,q4,q5,q6,q7,q8,q9,qA]
    , testValidatorFor (p3,p4,p5,p6,p7,p8,p9,pA) $ every [q3,q4,q5,q6,q7,q8,q9,qA]
    ]



testConjunctions :: TestTree
testConjunctions = testGroup "Property Conjunctions"
  [ testConjunctions2
      (Letters, all isLetter)
      (Numbers, all isNumber)
      (AlphaNumericChars, all isAlphaNum)
      (WhitespaceChars, all isSpace)
      (lengthAtMost10, lengthLEq 10)
      (lengthAtLeast5, lengthGEq 5)
      (lengthIs7, lengthEq 7)

  , testConjunctions3
      (Letters, all isLetter)
      (Numbers, all isNumber)
      (AlphaNumericChars, all isAlphaNum)
      (WhitespaceChars, all isSpace)
      (lengthAtMost10, lengthLEq 10)
      (lengthAtLeast5, lengthGEq 5)
      (lengthIs7, lengthEq 7)

  , testConjunctions4
      (Letters, all isLetter)
      (Numbers, all isNumber)
      (AlphaNumericChars, all isAlphaNum)
      (WhitespaceChars, all isSpace)
      (lengthAtMost10, lengthLEq 10)
      (lengthAtLeast5, lengthGEq 5)
      (lengthIs7, lengthEq 7)

  , testConjunctions5
      (Letters, all isLetter)
      (Numbers, all isNumber)
      (AlphaNumericChars, all isAlphaNum)
      (WhitespaceChars, all isSpace)
      (lengthAtMost10, lengthLEq 10)
      (lengthAtLeast5, lengthGEq 5)
      (lengthIs7, lengthEq 7)

  , testConjunctions6
      (Letters, all isLetter)
      (Numbers, all isNumber)
      (AlphaNumericChars, all isAlphaNum)
      (WhitespaceChars, all isSpace)
      (lengthAtMost10, lengthLEq 10)
      (lengthAtMost15, lengthLEq 15)
      (lengthAtLeast5, lengthGEq 5)
      (lengthIs7, lengthEq 7)

  , testConjunctions7
      (Letters, all isLetter)
      (Numbers, all isNumber)
      (AlphaNumericChars, all isAlphaNum)
      (WhitespaceChars, all isSpace)
      (lengthAtMost10, lengthLEq 10)
      (lengthAtMost15, lengthLEq 15)
      (lengthAtLeast5, lengthGEq 5)
      (lengthIs7, lengthEq 7)
      (AsciiChars, all isAscii)

  , testConjunctions8
      (Letters, all isLetter)
      (Numbers, all isNumber)
      (AlphaNumericChars, all isAlphaNum)
      (WhitespaceChars, all isSpace)
      (lengthAtMost10, lengthLEq 10)
      (lengthAtMost15, lengthLEq 15)
      (lengthAtLeast5, lengthGEq 5)
      (lengthIs7, lengthEq 7)
      (AsciiChars, all isAscii)
      (IsNotEmpty, (/= ""))
  ]



testDisjunctions2
  :: ( Eq p1, Show p1, Typeable p1, StringProperty p1
     , Eq p2, Show p2, Typeable p2, StringProperty p2
     , Eq p3, Show p3, Typeable p3, StringProperty p3
     , Eq p4, Show p4, Typeable p4, StringProperty p4
     , Eq p5, Show p5, Typeable p5, StringProperty p5
     , Eq p6, Show p6, Typeable p6, StringProperty p6
     , Eq p7, Show p7, Typeable p7, StringProperty p7
     )
  => (p1, String -> Bool)
  -> (p2, String -> Bool)
  -> (p3, String -> Bool)
  -> (p4, String -> Bool)
  -> (p5, String -> Bool)
  -> (p6, String -> Bool)
  -> (p7, String -> Bool)
  -> TestTree
testDisjunctions2 (p1,q1) (p2,q2) (p3,q3) (p4,q4) (p5,q5) (p6,q6) (p7,q7) =
  testGroup "Property Conjunctions (2)"
    [ testValidatorFor (p1 :|| p2) $ some [q1,q2]
    , testValidatorFor (p1 :|| p3) $ some [q1,q3]
    , testValidatorFor (p1 :|| p4) $ some [q1,q4]
    , testValidatorFor (p1 :|| p5) $ some [q1,q5]
    , testValidatorFor (p1 :|| p6) $ some [q1,q6]
    , testValidatorFor (p1 :|| p7) $ some [q1,q7]
    , testValidatorFor (p2 :|| p3) $ some [q2,q3]
    , testValidatorFor (p2 :|| p4) $ some [q2,q4]
    , testValidatorFor (p2 :|| p5) $ some [q2,q5]
    , testValidatorFor (p2 :|| p6) $ some [q2,q6]
    , testValidatorFor (p2 :|| p7) $ some [q2,q7]
    , testValidatorFor (p3 :|| p4) $ some [q3,q4]
    , testValidatorFor (p3 :|| p5) $ some [q3,q5]
    , testValidatorFor (p3 :|| p6) $ some [q3,q6]
    , testValidatorFor (p3 :|| p7) $ some [q3,q7]
    , testValidatorFor (p4 :|| p5) $ some [q4,q5]
    , testValidatorFor (p4 :|| p6) $ some [q4,q6]
    , testValidatorFor (p4 :|| p7) $ some [q4,q7]
    , testValidatorFor (p5 :|| p6) $ some [q5,q6]
    , testValidatorFor (p5 :|| p7) $ some [q5,q7]
    , testValidatorFor (p6 :|| p7) $ some [q6,q7]
    ]

testDisjunctions :: TestTree
testDisjunctions = testGroup "Property Disjunctions"
  [ testDisjunctions2
      (Letters, all isLetter)
      (Numbers, all isNumber)
      (AlphaNumericChars, all isAlphaNum)
      (WhitespaceChars, all isSpace)
      (lengthAtMost10, lengthLEq 10)
      (lengthAtLeast5, lengthGEq 5)
      (lengthIs7, lengthEq 7)
  ]

testEquivalences :: TestTree
testEquivalences = testGroup "Property Equivalence"
  [ testCharEquivalences
  , testConjunctionEquivalences
  ]

testCharEquivalences :: TestTree
testCharEquivalences = testGroup "Property Equivalence"
  [ testEquivalenceFor (Letters) (EachCharIs Letters)
  , testEquivalenceFor (PrintableChars) (EachCharIs PrintableChars)
  , testEquivalenceFor (DecimalDigits) (EachCharIs DecimalDigits)
  , testEquivalenceFor (HexDigits) (EachCharIs HexDigits)
  , testEquivalenceFor (Numbers) (EachCharIs Numbers)
  , testEquivalenceFor (Punctuation) (EachCharIs Punctuation)
  , testEquivalenceFor (LowerCaseChars) (EachCharIs LowerCaseChars)
  , testEquivalenceFor (UpperCaseChars) (EachCharIs UpperCaseChars)
  , testEquivalenceFor (WhitespaceChars) (EachCharIs WhitespaceChars)
  , testEquivalenceFor (MarkChars) (EachCharIs MarkChars)
  , testEquivalenceFor (SymbolChars) (EachCharIs SymbolChars)
  , testEquivalenceFor (SeparatorChars) (EachCharIs SeparatorChars)
  , testEquivalenceFor (ControlChars) (EachCharIs ControlChars)
  , testEquivalenceFor (AlphaNumericChars) (EachCharIs AlphaNumericChars)
  , testEquivalenceFor (AsciiChars) (EachCharIs AsciiChars)
  , testEquivalenceFor (Latin1Chars) (EachCharIs Latin1Chars)
  ]

testConjunctionEquivalences :: TestTree
testConjunctionEquivalences = testGroup "Conjunction Equivalence"
  [ testEquivalenceFor (Letters, lengthAtMost1) (lengthAtMost1, Letters)
  , testEquivalenceFor (Letters, lengthAtMost2) (lengthAtMost2, Letters)
  , testEquivalenceFor (Letters, lengthAtMost3) (lengthAtMost3, Letters)
  , testEquivalenceFor (Letters, lengthAtMost4) (lengthAtMost4, Letters)
  , testEquivalenceFor (Letters, lengthAtMost5) (lengthAtMost5, Letters)
  , testEquivalenceFor (Letters, lengthAtMost6) (lengthAtMost6, Letters)
  , testEquivalenceFor (Letters, lengthAtMost7) (lengthAtMost7, Letters)
  , testEquivalenceFor (Letters, lengthAtMost8) (lengthAtMost8, Letters)
  ]





testPrefix :: TestTree
testPrefix = testGroup "PrefixedBy"
  [ testValidatorFor (PrefixedBy (Proxy :: Proxy "a")) (isPrefixOf "a")
  , testValidatorFor (PrefixedBy (Proxy :: Proxy "b")) (isPrefixOf "b")
  , testValidatorFor (PrefixedBy (Proxy :: Proxy "c")) (isPrefixOf "c")
  , testValidatorFor (PrefixedBy (Proxy :: Proxy "d")) (isPrefixOf "d")
  , testValidatorFor (PrefixedBy (Proxy :: Proxy "e")) (isPrefixOf "e")
  , testValidatorFor (PrefixedBy (Proxy :: Proxy "f")) (isPrefixOf "f")
  , testValidatorFor (PrefixedBy (Proxy :: Proxy "g")) (isPrefixOf "g")
  ]

testSuffix :: TestTree
testSuffix = testGroup "SuffixedBy"
  [ testValidatorFor (SuffixedBy (Proxy :: Proxy "a")) (isSuffixOf "a")
  , testValidatorFor (SuffixedBy (Proxy :: Proxy "b")) (isSuffixOf "b")
  , testValidatorFor (SuffixedBy (Proxy :: Proxy "c")) (isSuffixOf "c")
  , testValidatorFor (SuffixedBy (Proxy :: Proxy "d")) (isSuffixOf "d")
  , testValidatorFor (SuffixedBy (Proxy :: Proxy "e")) (isSuffixOf "e")
  , testValidatorFor (SuffixedBy (Proxy :: Proxy "f")) (isSuffixOf "f")
  , testValidatorFor (SuffixedBy (Proxy :: Proxy "g")) (isSuffixOf "g")
  ]

testInfix :: TestTree
testInfix = testGroup "InfixedBy"
  [ testValidatorFor (InfixedBy (Proxy :: Proxy "a")) (isInfixOf "a")
  , testValidatorFor (InfixedBy (Proxy :: Proxy "b")) (isInfixOf "b")
  , testValidatorFor (InfixedBy (Proxy :: Proxy "c")) (isInfixOf "c")
  , testValidatorFor (InfixedBy (Proxy :: Proxy "d")) (isInfixOf "d")
  , testValidatorFor (InfixedBy (Proxy :: Proxy "e")) (isInfixOf "e")
  , testValidatorFor (InfixedBy (Proxy :: Proxy "f")) (isInfixOf "f")
  , testValidatorFor (InfixedBy (Proxy :: Proxy "g")) (isInfixOf "g")
  ]

testIsExactly :: TestTree
testIsExactly = testGroup "IsExactly"
  [ testValidatorFor (IsExactly (Proxy :: Proxy "a")) (== "a")
  , testValidatorFor (IsExactly (Proxy :: Proxy "b")) (== "b")
  , testValidatorFor (IsExactly (Proxy :: Proxy "c")) (== "c")
  , testValidatorFor (IsExactly (Proxy :: Proxy "d")) (== "d")
  , testValidatorFor (IsExactly (Proxy :: Proxy "e")) (== "e")
  , testValidatorFor (IsExactly (Proxy :: Proxy "f")) (== "f")
  , testValidatorFor (IsExactly (Proxy :: Proxy "g")) (== "g")
  ]

testNotPrefix :: TestTree
testNotPrefix = testGroup "NotPrefixedBy"
  [ testValidatorFor (NotPrefixedBy (Proxy :: Proxy "a")) (not . isPrefixOf "a")
  , testValidatorFor (NotPrefixedBy (Proxy :: Proxy "b")) (not . isPrefixOf "b")
  , testValidatorFor (NotPrefixedBy (Proxy :: Proxy "c")) (not . isPrefixOf "c")
  , testValidatorFor (NotPrefixedBy (Proxy :: Proxy "d")) (not . isPrefixOf "d")
  , testValidatorFor (NotPrefixedBy (Proxy :: Proxy "e")) (not . isPrefixOf "e")
  , testValidatorFor (NotPrefixedBy (Proxy :: Proxy "f")) (not . isPrefixOf "f")
  , testValidatorFor (NotPrefixedBy (Proxy :: Proxy "g")) (not . isPrefixOf "g")
  ]

testNotSuffix :: TestTree
testNotSuffix = testGroup "NotSuffixedBy"
  [ testValidatorFor (NotSuffixedBy (Proxy :: Proxy "a")) (not . isSuffixOf "a")
  , testValidatorFor (NotSuffixedBy (Proxy :: Proxy "b")) (not . isSuffixOf "b")
  , testValidatorFor (NotSuffixedBy (Proxy :: Proxy "c")) (not . isSuffixOf "c")
  , testValidatorFor (NotSuffixedBy (Proxy :: Proxy "d")) (not . isSuffixOf "d")
  , testValidatorFor (NotSuffixedBy (Proxy :: Proxy "e")) (not . isSuffixOf "e")
  , testValidatorFor (NotSuffixedBy (Proxy :: Proxy "f")) (not . isSuffixOf "f")
  , testValidatorFor (NotSuffixedBy (Proxy :: Proxy "g")) (not . isSuffixOf "g")
  ]

testNotInfix :: TestTree
testNotInfix = testGroup "InfixedBy"
  [ testValidatorFor (NotInfixedBy (Proxy :: Proxy "a")) (not . isInfixOf "a")
  , testValidatorFor (NotInfixedBy (Proxy :: Proxy "b")) (not . isInfixOf "b")
  , testValidatorFor (NotInfixedBy (Proxy :: Proxy "c")) (not . isInfixOf "c")
  , testValidatorFor (NotInfixedBy (Proxy :: Proxy "d")) (not . isInfixOf "d")
  , testValidatorFor (NotInfixedBy (Proxy :: Proxy "e")) (not . isInfixOf "e")
  , testValidatorFor (NotInfixedBy (Proxy :: Proxy "f")) (not . isInfixOf "f")
  , testValidatorFor (NotInfixedBy (Proxy :: Proxy "g")) (not . isInfixOf "g")
  ]

testIsNotExactly :: TestTree
testIsNotExactly = testGroup "IsNotExactly"
  [ testValidatorFor (IsNotExactly (Proxy :: Proxy "a")) (/= "a")
  , testValidatorFor (IsNotExactly (Proxy :: Proxy "b")) (/= "b")
  , testValidatorFor (IsNotExactly (Proxy :: Proxy "c")) (/= "c")
  , testValidatorFor (IsNotExactly (Proxy :: Proxy "d")) (/= "d")
  , testValidatorFor (IsNotExactly (Proxy :: Proxy "e")) (/= "e")
  , testValidatorFor (IsNotExactly (Proxy :: Proxy "f")) (/= "f")
  , testValidatorFor (IsNotExactly (Proxy :: Proxy "g")) (/= "g")
  ]



testManyLinesOf :: TestTree
testManyLinesOf = testGroup "ManyLinesOf"
  [ testValidatorFor (ManyLinesOf Letters) (manyLinesOf (all isLetter))
  , testValidatorFor (ManyLinesOf Numbers) (manyLinesOf (all isNumber))
  ]

testLinesOf :: TestTree
testLinesOf = testGroup "LinesOf"
  [ testValidatorFor (LinesOf (Proxy :: Proxy 1) Letters) (linesOf 1 (all isLetter))
  , testValidatorFor (LinesOf (Proxy :: Proxy 2) Letters) (linesOf 2 (all isLetter))
  , testValidatorFor (LinesOf (Proxy :: Proxy 3) Letters) (linesOf 3 (all isLetter))
  , testValidatorFor (LinesOf (Proxy :: Proxy 4) Letters) (linesOf 4 (all isLetter))

  , testValidatorFor (LinesOf (Proxy :: Proxy 1) Numbers) (linesOf 1 (all isNumber))
  , testValidatorFor (LinesOf (Proxy :: Proxy 2) Numbers) (linesOf 2 (all isNumber))
  , testValidatorFor (LinesOf (Proxy :: Proxy 3) Numbers) (linesOf 3 (all isNumber))
  , testValidatorFor (LinesOf (Proxy :: Proxy 4) Numbers) (linesOf 4 (all isNumber))
  ]

testLinesOfN :: TestTree
testLinesOfN = testGroup "LinesOfN"
  [ testGroup "LinesOf1"
    [ testValidatorFor (LinesOf1 Letters) $
        linesOfN [all isLetter]
    , testValidatorFor (LinesOf1 Numbers) $
        linesOfN [all isNumber]
    ]

  , testGroup "LinesOf2"
    [ testValidatorFor (LinesOf2 Letters Letters) $
        linesOfN [all isLetter, all isLetter]
    , testValidatorFor (LinesOf2 Letters Numbers) $
        linesOfN [all isLetter, all isNumber]
    , testValidatorFor (LinesOf2 Numbers Letters) $
        linesOfN [all isNumber, all isLetter]
    , testValidatorFor (LinesOf2 Numbers Numbers) $
        linesOfN [all isNumber, all isNumber]
    ]

  , testGroup "LinesOf3"
    [ testValidatorFor (LinesOf3 Letters Letters Letters) $
        linesOfN [all isLetter, all isLetter, all isLetter]
    , testValidatorFor (LinesOf3 Letters Letters Numbers) $
        linesOfN [all isLetter, all isLetter, all isNumber]
    , testValidatorFor (LinesOf3 Letters Numbers Letters) $
        linesOfN [all isLetter, all isNumber, all isLetter]
    , testValidatorFor (LinesOf3 Letters Numbers Numbers) $
        linesOfN [all isLetter, all isNumber, all isNumber]
    , testValidatorFor (LinesOf3 Numbers Letters Letters) $
        linesOfN [all isNumber, all isLetter, all isLetter]
    , testValidatorFor (LinesOf3 Numbers Letters Numbers) $
        linesOfN [all isNumber, all isLetter, all isNumber]
    , testValidatorFor (LinesOf3 Numbers Numbers Letters) $
        linesOfN [all isNumber, all isNumber, all isLetter]
    , testValidatorFor (LinesOf3 Numbers Numbers Numbers) $
        linesOfN [all isNumber, all isNumber, all isNumber]
    ]

  , testGroup "LinesOf4"
    [ testValidatorFor (LinesOf4 Numbers Letters Letters Letters) $
        linesOfN [all isNumber, all isLetter, all isLetter, all isLetter]
    , testValidatorFor (LinesOf4 Letters Numbers Letters Letters) $
        linesOfN [all isLetter, all isNumber, all isLetter, all isLetter]
    , testValidatorFor (LinesOf4 Letters Letters Numbers Letters) $
        linesOfN [all isLetter, all isLetter, all isNumber, all isLetter]
    , testValidatorFor (LinesOf4 Letters Letters Letters Numbers) $
        linesOfN [all isLetter, all isLetter, all isLetter, all isNumber]
    ]

  , testGroup "LinesOf5"
    [ testValidatorFor (LinesOf5 Numbers Letters Letters Letters Letters) $
        linesOfN [all isNumber, all isLetter, all isLetter, all isLetter, all isLetter]
    , testValidatorFor (LinesOf5 Letters Numbers Letters Letters Letters) $
        linesOfN [all isLetter, all isNumber, all isLetter, all isLetter, all isLetter]
    , testValidatorFor (LinesOf5 Letters Letters Numbers Letters Letters) $
        linesOfN [all isLetter, all isLetter, all isNumber, all isLetter, all isLetter]
    , testValidatorFor (LinesOf5 Letters Letters Letters Numbers Letters) $
        linesOfN [all isLetter, all isLetter, all isLetter, all isNumber, all isLetter]
    , testValidatorFor (LinesOf5 Letters Letters Letters Letters Numbers) $
        linesOfN [all isLetter, all isLetter, all isLetter, all isLetter, all isNumber]
    ]

  , testGroup "LinesOf6"
    [ testValidatorFor (LinesOf6 Numbers Letters Letters Letters Letters Letters) $
        linesOfN [all isNumber, all isLetter, all isLetter, all isLetter, all isLetter, all isLetter]
    , testValidatorFor (LinesOf6 Letters Numbers Letters Letters Letters Letters) $
        linesOfN [all isLetter, all isNumber, all isLetter, all isLetter, all isLetter, all isLetter]
    , testValidatorFor (LinesOf6 Letters Letters Numbers Letters Letters Letters) $
        linesOfN [all isLetter, all isLetter, all isNumber, all isLetter, all isLetter, all isLetter]
    , testValidatorFor (LinesOf6 Letters Letters Letters Numbers Letters Letters) $
        linesOfN [all isLetter, all isLetter, all isLetter, all isNumber, all isLetter, all isLetter]
    , testValidatorFor (LinesOf6 Letters Letters Letters Letters Numbers Letters) $
        linesOfN [all isLetter, all isLetter, all isLetter, all isLetter, all isNumber, all isLetter]
    , testValidatorFor (LinesOf6 Letters Letters Letters Letters Letters Numbers) $
        linesOfN [all isLetter, all isLetter, all isLetter, all isLetter, all isLetter, all isNumber]

    , testValid (LinesOf6 Letters Letters Letters Letters Letters Letters)
      [ "a\nb\nc\nd\ne\nf\n"
      ]

    , testNotValid (LinesOf6 Letters Letters Letters Letters Letters Letters)
      [ "1\nb\nc\nd\ne\nf\n"
      , "a\n1\nc\nd\ne\nf\n"
      , "a\nb\n1\nd\ne\nf\n"
      , "a\nb\nc\n1\ne\nf\n"
      , "a\nb\nc\nd\n1\nf\n"
      , "a\nb\nc\nd\ne\n1\n"
      ]
    ]

  , testGroup "LinesOf7"
    [ testValidatorFor (LinesOf7 Numbers Letters Letters Letters Letters Letters Letters) $
        linesOfN [all isNumber, all isLetter, all isLetter, all isLetter, all isLetter, all isLetter, all isLetter]
    , testValidatorFor (LinesOf7 Letters Numbers Letters Letters Letters Letters Letters) $
        linesOfN [all isLetter, all isNumber, all isLetter, all isLetter, all isLetter, all isLetter, all isLetter]
    , testValidatorFor (LinesOf7 Letters Letters Numbers Letters Letters Letters Letters) $
        linesOfN [all isLetter, all isLetter, all isNumber, all isLetter, all isLetter, all isLetter, all isLetter]
    , testValidatorFor (LinesOf7 Letters Letters Letters Numbers Letters Letters Letters) $
        linesOfN [all isLetter, all isLetter, all isLetter, all isNumber, all isLetter, all isLetter, all isLetter]
    , testValidatorFor (LinesOf7 Letters Letters Letters Letters Numbers Letters Letters) $
        linesOfN [all isLetter, all isLetter, all isLetter, all isLetter, all isNumber, all isLetter, all isLetter]
    , testValidatorFor (LinesOf7 Letters Letters Letters Letters Letters Numbers Letters) $
        linesOfN [all isLetter, all isLetter, all isLetter, all isLetter, all isLetter, all isNumber, all isLetter]
    , testValidatorFor (LinesOf7 Letters Letters Letters Letters Letters Letters Numbers) $
        linesOfN [all isLetter, all isLetter, all isLetter, all isLetter, all isLetter, all isLetter, all isNumber]

    , testValid (LinesOf7 Letters Letters Letters Letters Letters Letters Letters)
      [ "a\nb\nc\nd\ne\nf\ng\n"
      ]

    , testNotValid (LinesOf7 Letters Letters Letters Letters Letters Letters Letters)
      [ "1\nb\nc\nd\ne\nf\ng\n"
      , "a\n1\nc\nd\ne\nf\ng\n"
      , "a\nb\n1\nd\ne\nf\ng\n"
      , "a\nb\nc\n1\ne\nf\ng\n"
      , "a\nb\nc\nd\n1\nf\ng\n"
      , "a\nb\nc\nd\ne\n1\ng\n"
      , "a\nb\nc\nd\ne\nf\n1\n"
      ]
    ]
  ]



testRegex :: TestTree
testRegex = testGroup "Regex"
  [ testValidatorFor (Matches (Proxy :: Proxy "a")) (=~ "a")
  , testValidatorFor (Matches (Proxy :: Proxy "b")) (=~ "b")
  , testValidatorFor (Matches (Proxy :: Proxy "c")) (=~ "c")
  , testValidatorFor (Matches (Proxy :: Proxy "d")) (=~ "d")
  , testValidatorFor (Matches (Proxy :: Proxy "e")) (=~ "e")

  , testValidatorFor (Matches (Proxy :: Proxy "m.")) (=~ "m.")
  , testValidatorFor (Matches (Proxy :: Proxy "m+")) (=~ "m+")
  , testValidatorFor (Matches (Proxy :: Proxy "[a-c]")) (=~ "[a-c]")
  , testValidatorFor (Matches (Proxy :: Proxy "^f")) (=~ "^f")
  , testValidatorFor (Matches (Proxy :: Proxy "z$")) (=~ "z$")
  ]



testManyFixedWidth :: TestTree
testManyFixedWidth = testGroup "Many Fixed Width"
  [ testValidatorFor (ManyFixedWidth (Proxy :: Proxy 2) Letters) (manyFieldsOf 2 (all isLetter))
  , testValidatorFor (ManyFixedWidth (Proxy :: Proxy 3) Letters) (manyFieldsOf 3 (all isLetter))
  , testValidatorFor (ManyFixedWidth (Proxy :: Proxy 4) Letters) (manyFieldsOf 4 (all isLetter))
  , testValidatorFor (ManyFixedWidth (Proxy :: Proxy 5) Letters) (manyFieldsOf 5 (all isLetter))
  ]

testFixedWidth :: TestTree
testFixedWidth = testGroup "Fixed Width"
  [ testValidatorFor (FixedWidth (Proxy :: Proxy 2) (Proxy :: Proxy 2) Letters) (fieldsOf 2 2 (all isLetter))
  , testValidatorFor (FixedWidth (Proxy :: Proxy 3) (Proxy :: Proxy 2) Letters) (fieldsOf 3 2 (all isLetter))
  , testValidatorFor (FixedWidth (Proxy :: Proxy 4) (Proxy :: Proxy 2) Letters) (fieldsOf 4 2 (all isLetter))
  , testValidatorFor (FixedWidth (Proxy :: Proxy 5) (Proxy :: Proxy 2) Letters) (fieldsOf 5 2 (all isLetter))
  ]

testFixedFormat :: TestTree
testFixedFormat = testGroup "Fixed Format"
  [ testValidatorFor
      (FixedFormat1
        (Proxy :: Proxy 2, Letters))
      (fieldsOfN [2] [all isLetter])
  , testValidatorFor
      (FixedFormat1
        (Proxy :: Proxy 3, Letters))
      (fieldsOfN [3] [all isLetter])
  , testValidatorFor
      (FixedFormat1
        (Proxy :: Proxy 4, Letters))
      (fieldsOfN [4] [all isLetter])

  , testValidatorFor
      (FixedFormat2
        (Proxy :: Proxy 2, Letters)
        (Proxy :: Proxy 2, Numbers))
      (fieldsOfN [2,2] [all isLetter, all isNumber])
  , testValidatorFor
      (FixedFormat2
        (Proxy :: Proxy 2, Letters)
        (Proxy :: Proxy 3, Numbers))
      (fieldsOfN [2,3] [all isLetter, all isNumber])
  , testValidatorFor
      (FixedFormat2
        (Proxy :: Proxy 2, Letters)
        (Proxy :: Proxy 4, Numbers))
      (fieldsOfN [2,4] [all isLetter, all isNumber])

  , testValidatorFor
      (FixedFormat3
        (Proxy :: Proxy 2, Letters)
        (Proxy :: Proxy 2, Numbers)
        (Proxy :: Proxy 2, Letters))
      (fieldsOfN [2,2,2] [all isLetter, all isNumber, all isLetter])

  , testValidatorFor
      (FixedFormat3
        (Proxy :: Proxy 2, Letters)
        (Proxy :: Proxy 2, Numbers)
        (Proxy :: Proxy 3, Letters))
      (fieldsOfN [2,2,3] [all isLetter, all isNumber, all isLetter])

  , testValidatorFor
      (FixedFormat3
        (Proxy :: Proxy 2, Letters)
        (Proxy :: Proxy 2, Numbers)
        (Proxy :: Proxy 4, Letters))
      (fieldsOfN [2,2,4] [all isLetter, all isNumber, all isLetter])

  , testValidatorFor
      (FixedFormat4
        (Proxy :: Proxy 2, Letters)
        (Proxy :: Proxy 2, Numbers)
        (Proxy :: Proxy 2, Letters)
        (Proxy :: Proxy 2, Numbers))
      (fieldsOfN [2,2,2,2] [all isLetter, all isNumber, all isLetter, all isNumber])

  , testValidatorFor
      (FixedFormat4
        (Proxy :: Proxy 2, Letters)
        (Proxy :: Proxy 2, Numbers)
        (Proxy :: Proxy 2, Letters)
        (Proxy :: Proxy 3, Numbers))
      (fieldsOfN [2,2,2,3] [all isLetter, all isNumber, all isLetter, all isNumber])

  , testValidatorFor
      (FixedFormat4
        (Proxy :: Proxy 2, Letters)
        (Proxy :: Proxy 2, Numbers)
        (Proxy :: Proxy 2, Letters)
        (Proxy :: Proxy 4, Numbers))
      (fieldsOfN [2,2,2,4] [all isLetter, all isNumber, all isLetter, all isNumber])

  , testValidatorFor
      (FixedFormat5
        (Proxy :: Proxy 2, Letters)
        (Proxy :: Proxy 2, Numbers)
        (Proxy :: Proxy 2, Letters)
        (Proxy :: Proxy 2, Numbers)
        (Proxy :: Proxy 2, Letters))
      (fieldsOfN [2,2,2,2,2] [all isLetter, all isNumber, all isLetter, all isNumber, all isLetter])

  , testValidatorFor
      (FixedFormat5
        (Proxy :: Proxy 2, Letters)
        (Proxy :: Proxy 2, Numbers)
        (Proxy :: Proxy 2, Letters)
        (Proxy :: Proxy 2, Numbers)
        (Proxy :: Proxy 3, Letters))
      (fieldsOfN [2,2,2,2,3] [all isLetter, all isNumber, all isLetter, all isNumber, all isLetter])

  , testValidatorFor
      (FixedFormat5
        (Proxy :: Proxy 2, Letters)
        (Proxy :: Proxy 2, Numbers)
        (Proxy :: Proxy 2, Letters)
        (Proxy :: Proxy 2, Numbers)
        (Proxy :: Proxy 4, Letters))
      (fieldsOfN [2,2,2,2,4] [all isLetter, all isNumber, all isLetter, all isNumber, all isLetter])
  ]



testFixedEquivalence :: TestTree
testFixedEquivalence = testGroup "Fixed Width Equivalence"
  [ testEquivalenceFor (ManyFixedWidth (Proxy :: Proxy 1) Letters) (Letters)
  , testEquivalenceFor (ManyFixedWidth (Proxy :: Proxy 1) Numbers) (Numbers)
  , testEquivalenceFor (ManyFixedWidth (Proxy :: Proxy 1) WhitespaceChars) (WhitespaceChars)
  , testEquivalenceFor (ManyFixedWidth (Proxy :: Proxy 1) Punctuation) (Punctuation)
  ]





lengthGEq :: Int -> [a] -> Bool
lengthGEq k = (>= k) . length

lengthLEq :: Int -> [a] -> Bool
lengthLEq k = (<= k) . length

lengthEq :: Int -> [a] -> Bool
lengthEq k = (== k) . length

chunksOf :: Int -> [a] -> [[a]]
chunksOf k xs = case xs of
  [] -> []
  _ -> let (as,bs) = splitAt k xs in as : chunksOf k bs

manyLinesOf :: (String -> Bool) -> String -> Bool
manyLinesOf p = all p . lines

manyFieldsOf :: Int -> (String -> Bool) -> String -> Bool
manyFieldsOf k p xs = all (\x -> (p x) && (k == length x)) $ chunksOf k xs

linesOf :: Int -> (String -> Bool) -> String -> Bool
linesOf m p as = (m == length (lines as)) && (manyLinesOf p as)

fieldsOf :: Int -> Int -> (String -> Bool) -> String -> Bool
fieldsOf k n p xs = and
  [ all (\x -> (p x) && (k == length x)) $ chunksOf k xs
  , n == length (chunksOf k xs)
  ]

linesOfN :: [String -> Bool] -> String -> Bool
linesOfN ps = linesOfN' ps . lines
  where
    linesOfN' :: [String -> Bool] -> [String] -> Bool
    linesOfN' ps xs = case (ps,xs) of
      ([],[]) -> True
      (q:qs,z:zs) -> (q z) && linesOfN' qs zs
      _ -> False

fieldsOfN :: [Int] -> [String -> Bool] -> String -> Bool
fieldsOfN ws ps ds = and
  [ fieldsOfN' ps $ chunksOf' ws ds
  , and $ zipWith (\w d -> w == length d) ws (chunksOf' ws ds)
  ]
  where
    chunksOf' :: [Int] -> [a] -> [[a]]
    chunksOf' us ds = case us of
      [] -> [ds]
      [v] -> chunksOf v ds
      (v:vs) -> let (hs,ks) = splitAt v ds in hs : chunksOf' vs ks

    fieldsOfN' :: [String -> Bool] -> [String] -> Bool
    fieldsOfN' ps xs = case (ps,xs) of
      ([],[]) -> True
      (q:qs,z:zs) -> (q z) && fieldsOfN' qs zs
      _ -> False

every :: [a -> Bool] -> a -> Bool
every = foldr (&&&) (const True)
  where
    (&&&) :: (a -> Bool) -> (a -> Bool) -> a -> Bool
    (&&&) p q a = (p a) && (q a)

some :: [a -> Bool] -> a -> Bool
some = foldr (|||) (const False)
  where
    (|||) :: (a -> Bool) -> (a -> Bool) -> a -> Bool
    (|||) p q a = (p a) || (q a)

testValidatorFor
  :: (Eq p, Show p, Typeable p, StringProperty p)
  => p
  -> (String -> Bool)
  -> TestTree
testValidatorFor p q =
  let
    proxy :: p -> Proxy p
    proxy _ = Proxy
  in
    testGroup (show $ typeRep $ proxy p)
      [ testProperty "Predicate" $ testValidator p q
      , localOption (QuickCheckTests 5000) $
          testProperty "Identity" $ testIdentity p
      , testProperty "Reflexive" $ testReflexive p
      ]

testEquivalenceFor
  :: (Typeable p1, StringProperty p1, Typeable p2, StringProperty p2)
  => p1
  -> p2
  -> TestTree
testEquivalenceFor p1 p2 =
  let
    proxy :: p -> Proxy p
    proxy _ = Proxy

    label = "Equivalent:" ++
      (show $ typeRep $ proxy p1) ++ " and " ++
      (show $ typeRep $ proxy p2)
  in
    localOption (QuickCheckTests 5000) $
      testProperty label $ testEquivalence p1 p2

-- The validator is equivalent to some given predicate
testValidator
  :: (StringProperty p)
  => p -> (String -> Bool) -> String -> Bool
testValidator p q string =
  (q string) == (validator p string == Right ())

-- The validated string is unchanged
testIdentity
  :: (StringProperty p)
  => p -> String -> Bool
testIdentity p string =
  case validate p string of
    Left err -> seq (length $ prettyValidationErrors err) True
    Right x -> string == toString x

testReflexive
  :: (Eq p, Show p, StringProperty p)
  => p -> Bool
testReflexive p =
  (p == p) && ((show p) == (show p))

-- For testing equivalent string properties
testEquivalence
  :: (StringProperty p1, StringProperty p2)
  => p1 -> p2 -> String -> Bool
testEquivalence p1 p2 string =
  case (validator p1 string, validator p2 string) of
    (Right (), Right ()) -> True
    (Left err1, Left err2) -> seq (length $ show err1 ++ show err2) True
    _ -> False



testValid
  :: (StringProperty p)
  => p -> [String] -> TestTree
testValid p cases =
  testGroup "Individual test cases: Valid" $
    map (testProperty "Individual case" . testValid' p) cases

testValid'
  :: (StringProperty p)
  => p -> String -> Bool
testValid' p string =
  case validator p string of
    Left _ -> False
    Right () -> True

testNotValid
  :: (StringProperty p)
  => p -> [String] -> TestTree
testNotValid p cases =
  testGroup "Individual test cases: Not Valid" $
    map (testProperty "Individual case" . testNotValid' p) cases

testNotValid'
  :: (StringProperty p)
  => p -> String -> Bool
testNotValid' p string =
  case validator p string of
    Left err -> seq (length $ show err) True
    Right () -> False
